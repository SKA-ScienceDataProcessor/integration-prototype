#!/bin/bash
# Command line utility to access the flask interface for SDP State.
# Uses a menu interface to select GET or PUT; and if PUT
# which state to select.

# This utility uses the external commands curl and jq.
# Please ensure that you hve them installed before you use
# this utility. They may be installed on an Ubuntu/Debian
# system thus:
# sudo apt install jq curl
# or jq OSX thus:
# brew install jq
# (curl is a standard OSX utility?)

: ${DOCKER_HOST:=uri://localhost:0}
url2=http://${DOCKER_HOST#*//}
vanilla_url=${url2%:*}:5000/
URL=${vanilla_url}state
unset url2
allstates=$(curl -s "${vanilla_url}allowed_state_transitions")

do_put() {
    local PS3="Enter required state: "
    current_state=$(curl -s "${URL}" | jq .state | tr -d '\"' )
    states=($(<<< "$allstates" jq .$current_state[] | tr -d '\"'))
    select state in "${states[@]}"
    do
        printf "\n"
        result=$(curl -s -X PUT -H "Content-Type: application/json" \
                -d $(jq -cn --arg state ${state} '{"state":$state}') "${URL}")
        res=$(jq .message <<< "$result")
        if [[ ${res:+yes} == yes ]]
        then
            printf "received message %s\n" "${res//\"/}"
        else
            printf "received no reply\n"
        fi
        printf "\n"
        break
    done
}

do_get() {
    json=$(curl -s "${URL}")
    state=$(jq .state <<< "$json")
    printf "\n"
    if [[ ${state//\"/} == UNKNOWN ]]
        then 
            problem="$(jq .reason <<< "$json")"
            printf "Problem: %s\n" "${problem//\"/}"
        else 
            printf "State: %s\n" "${state//\"/}"
    fi
    printf "\n"
}


PS3="Please enter your choice: "
select choice in "Get state" "Put state" "Quit"
do
    case ${choice:-$REPLY} in
        Get*) do_get ;;
        Put*) 
            do_put 
            REPLY=
            ;;
        [Qq]*) break ;;
        *)
            printf "Enter the number or q to quit\n"
            REPLY=
            ;;
        
    esac
done
