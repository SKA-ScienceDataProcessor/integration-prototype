#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""Utility module to set initial data into the Configuration Database."""
import argparse
import json
import os
import shutil
from os import listdir
from os.path import dirname, join

import config_db
from config_db.config_db_redis import ConfigDb
from config_db import SDPState
from config_db import ServiceState
from config_db import SubarrayList
from config_db.workflow_definitions import add_workflow_definition


def initialise_states(data_dir: str):
    """Initialise fields for the state of SDP."""
    print('* Initialising SDP state')
    SDPState()
    with open(join(data_dir, 'services.json'), 'r') as file:
        services = json.load(file)
        for service in services['services']:
            print('* Initialising service state: {}'.format(service))
            subsystem, name, version = service.split('.')
            ServiceState(subsystem, name, version)


def initialise_subarrays():
    """Initialise subarrays."""
    print('* Initialising subarrays')
    SubarrayList()


def add_workflow_definitions(workflows_dir: str):
    """Add workflow definitions.

    Args:
        workflows_dir (str): Path used to store workflow definitions
    """
    workflow_files = [join(workflows_dir, fn)
                      for fn in listdir(workflows_dir)
                      if fn.endswith('.json')
                      and not fn.startswith('test')
                      and not fn == 'services.json']
    for file_path in workflow_files:
        print('* Loading workflow template: {}'.format(file_path))
        with open(file_path, 'r') as file:
            workflow_dict = json.load(file)
            add_workflow_definition(workflow_dict, join(workflows_dir,
                                                        'templates'))


def init_db(data_dir):
    """Initialise the database.

    If specified by the first command line argument, a data path containing
    service and workflow definitions is used to initialise the database
    instead of the default data path installed as part of the config_db
    library.

    A data path should be a directory containing the following:

        - services.json  (a file defining the set of services registered with
                          the MC)
        - workflows/     (a directory of SIP workflow definitions)

    """
    ConfigDb().flush_db()
    initialise_subarrays()
    initialise_states(data_dir)
    add_workflow_definitions(join(data_dir, 'workflows'))


def main():
    """Initialise the database.

    If specified by the first command line argument, a data path containing
    service and workflow definitions is used to initialise the database
    instead of the default data path installed as part of the config_db
    library.

    A data path should be a directory containing the following:

        - services.json  (a file defining the set of services registered with
                          the MC)
        - workflows/     (a directory of SIP workflow definitions)

    """
    parser = argparse.ArgumentParser(description='Initialise the database.')
    parser.add_argument('--data-dir', default=None, type=str, required=False,
                        help='Data dir to use. If does not exist, create.')
    args = parser.parse_args()

    default_data_dir = join(dirname(config_db.__file__), 'data')
    if args.data_dir is None:
        data_dir = default_data_dir
        print('Using default data path: ', data_dir)
        init_db(data_dir)
    else:
        data_dir = os.path.abspath(args.data_dir)
        if os.path.isdir(data_dir):
            print('Using user specified data path: ', data_dir)
            init_db(data_dir)
        else:
            print('Creating default data path: ', data_dir)
            shutil.copytree(src=default_data_dir, dst=data_dir)


if __name__ == '__main__':
    main()
