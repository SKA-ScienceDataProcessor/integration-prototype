#!/bin/bash
# Command line utility to access the flask interface for SDP State.
# Uses a menu interface to select GET or PUT; and if PUT
# which state to select.

: ${DOCKER_HOST:=uri://localhost:0}
url2=http://${DOCKER_HOST#*//}
vanilla_url=${url2%:*}:5000/
URL=${vanilla_url}state
unset url2

get_json() {
    local json url
    url="$(jq ".[\"$1\"]" <<< $urlset)"
    json=$(curl -s ${url//\"/})
    printf "%s\n" "$json"
}


get_url() {
    local url
    url="$(jq ".[\"$1\"]" <<< $urlset)"
    printf "%s" ${url//\"/}
}


do_all() {
    local PS3="Enter required information: "
    select choice in "${urlkeys[@]}" Back
    do
        [[ $choice = Back ]] && break
        json=$(get_json "${choice}")
        jq . <<< $json
        REPLY=
    done
}


do_get() {
    json=$(get_json "SDP current state")
    state=$(jq .current_state <<< "$json")
    printf "\n"
    if [[ ${state//\"/} == UNKNOWN ]]
    then 
        problem="$(jq .reason <<< "$json")"
        printf "Problem: %s\n" "${problem//\"/}"
    else 
        time=$(jq .last_updated <<< "$json")
        printf "State: %s\n" "${state//\"/}"
        printf "Update time: %s\n" "${time//\"/}"
    fi
    printf "\n"
}


do_put() {
    local PS3="Enter required state: "
    states=($( get_json "Allowed target states"|jq .[] | tr -d '\"') )
    select state in "${states[@]}"
    do
        printf "\n"
        url=$(get_url "SDP target state")
        result=$(curl -s -X PUT -H "Content-Type: application/json" \
                -d $(jq -cn --arg state ${state} '{"value":$state}') "${url}")
        res=$(jq .message <<< "$result")
        if [[ ${res:+yes} == yes ]]
        then
            printf "received message %s\n" "${res//\"/}"
        else
            printf "received no reply\n"
        fi
        printf "\n"
        break
    done
}


urlset=$(curl -s "${vanilla_url}"| \
         jq '[._links.items[]|{key:.Link,value:.href}]|from_entries')

states=($( get_json "Allowed target states"|jq .[] | tr -d '\"') )

urlkeys=()
while read line
do
    [[ $line =~ ^\"Configure ]] && continue
    urlkeys+=( "${line//\"/}" )
done < <(jq '.|keys|.[]' <<< $urlset)

PS3="Please enter your choice: "
select choice in "Get state" "Put state" "All actions" "Quit"
do
    case ${choice:-$REPLY} in
        Get*) do_get ;;
        Put*) 
            do_put 
            REPLY=
            ;;
        All*)
            do_all 
            REPLY=
            ;;
        [Qq]*) break ;;
        *)
            printf "Enter the number or q to quit\n"
            REPLY=
            ;;
    esac
done
