version: '3.6'

services:

  # ==========================================================================
  # Tango Control containers
  # ==========================================================================

  tc_tango_master:
    image: skasip/tango_master:1.2.0
    environment:
    - TANGO_HOST=tc_tango_database:10000
    - REDIS_HOST=ec_config_database
    deploy:
      mode: replicated
      replicas: 1
    depends_on:
    - config_database
    - tango_database

  tc_tango_subarray:
    image: skasip/tango_subarray:1.2.0
    environment:
    - TANGO_HOST=tc_tango_database:10000
    - REDIS_HOST=ec_config_database
    deploy:
      mode: replicated
      replicas: 1
    depends_on:
    - config_database
    - tango_database

  tc_tango_processing_block:
    image: skasip/tango_processing_block:1.2.0
    environment:
    - TANGO_HOST=tc_tango_database:10000
    - REDIS_HOST=ec_config_database
    deploy:
      mode: replicated
      replicas: 1
    depends_on:
    - config_database
    - tango_database

  tc_tango_database:
    image: skasip/tango_database:1.0.4
    ports:
    - 10000:10000
    environment:
    - MYSQL_HOST=tc_tango_mysql:3306
    - MYSQL_USER=tango
    - MYSQL_PASSWORD=tango
    - MYSQL_DATABASE=tango_db
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
        - node.role == manager
    depends_on:
    - tango_mysql

  tc_tango_mysql:
    image: skasip/tango_mysql:1.0.3
    environment:
    - MYSQL_ROOT_PASSWORD=sip1
    deploy:
      mode: replicated
      replicas: 1
    volumes:
    - sip_tango_mysql:/var/lib/mysql:consistent

  tc_flask_master:
    image: skasip/flask_master:1.2.0
    ports:
    - 5000:5000
    environment:
    - REDIS_HOST=ec_config_database
    deploy:
      mode: replicated
      replicas: 1
    depends_on:
    - config_database

  # ==========================================================================
  # Execution Control containers
  # ==========================================================================

  ec_master_controller:
    image: master_controller
    command: ["-v", "--random_errors"]
    environment:
    - REDIS_HOST=ec_config_database
    - REDIS_PORT=6379
    deploy:
      mode: replicated
      replicas: 1
    depends_on:
    - config_database

  ec_processing_controller:
    image: skasip/processing_controller:1.2.0
    environment:
    - CELERY_BROKER_URL=redis://ec_celery_broker/1
    - CELERY_RESULT_BACKEND=redis://ec_celery_backend/2
    - REDIS_HOST=ec_config_database
    deploy:
      mode: replicated
      replicas: 1
    depends_on:
    - config_database

  ec_processing_block_controller:
    image: skasip/processing_block_controller:1.2.0
    environment:
    - CELERY_BROKER_URL=redis://ec_celery_broker/1
    - CELERY_RESULT_BACKEND=redis://ec_celery_backend/2
    - REDIS_HOST=ec_config_database
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      mode: replicated
      replicas: 1
    depends_on:
    - config_database
    - processing_block_controller_broker
    - processing_block_controller_backend

  ec_config_database:
    image: redis:5.0.1-alpine
    deploy:
      mode: replicated
      replicas: 1
    ports:
    - 6379:6379
    volumes:
    - sip_config_database:/data/db

  ec_celery_broker:
    image: redis:5.0.1-alpine
    deploy:
      mode: replicated
      replicas: 1
    volumes:
    - sip_pbc_broker:/data/db

  ec_celery_backend:
    image: redis:5.0.1-alpine
    deploy:
      mode: replicated
      replicas: 1
    volumes:
    - sip_pbc_backend:/data/db

  # ==========================================================================
  # Platform containers ?
  # ==========================================================================

  platform_redis-commander-db0:
    image: rediscommander/redis-commander
    ports:
    - 8081:8081
    environment:
    - REDIS_HOSTS=config_db:ec_config_database:6379:0
    deploy:
      mode: replicated
      replicas: 1
    depends_on:
    - config_database

  # ==========================================================================
  # Prometheus alarms containers
  # ==========================================================================

  prometheus:
    image: sip-prometheus
    ports:
      - 9090:9090

  pushgateway:
    image: prom/pushgateway
    ports:
      - 9091:9091

  alarm_receiver:
    image: sip-alarm-receiver
    ports:
      - 9095:9095
    depends_on:
      - "kafka"

  alert_manager:
    image: sip-alert-manager
    ports:
      - 9093:9093

  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka
    ports:
      - "9094:9094"
    environment:
      HOSTNAME_COMMAND: "route -n | awk '/UG[ \t]/{print $$2}'"
      KAFKA_ADVERTISED_LISTENERS: INSIDE://:9092,OUTSIDE://_{HOSTNAME_COMMAND}:9094
      KAFKA_LISTENERS: INSIDE://:9092,OUTSIDE://:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

volumes:
  sip_config_database:
  sip_pbc_broker:
  sip_pbc_backend:
  sip_tango_mysql:
